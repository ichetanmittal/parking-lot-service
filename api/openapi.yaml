openapi: 3.0.0
info:
  title: Parking Lot Service API
  version: 1.0.0
  description: API for managing parking lots, entries, and tariffs

servers:
  - url: http://localhost:8080

paths:
  /parking-lots:
    post:
      summary: Create a new parking lot
      operationId: createParkingLot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingLotInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'

  /parking-lots/{id}:
    get:
      summary: Get parking lot details
      operationId: getParkingLot
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'

  /parking-lots/{id}/available-spots:
    get:
      summary: Get available spots in a parking lot
      operationId: getAvailableSpots
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer

  /parking-entries:
    post:
      summary: Create a new parking entry
      operationId: createParkingEntry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingEntryInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingEntry'

  /parking-entries/{id}/exit:
    put:
      summary: Exit a parking spot
      operationId: exitParking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ParkingEntry:
                    $ref: '#/components/schemas/ParkingEntry'
                  Receipt:
                    $ref: '#/components/schemas/Receipt'

  /tariffs:
    post:
      summary: Create a new tariff
      operationId: createTariff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TariffInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'

components:
  schemas:
    ParkingLotInput:
      type: object
      properties:
        name:
          type: string
        capacity:
          type: object
          additionalProperties:
            type: integer
      required:
        - name
        - capacity

    ParkingLot:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        capacity:
          type: object
          additionalProperties:
            type: integer
      required:
        - id
        - name
        - capacity

    ParkingEntryInput:
      type: object
      properties:
        parkingLotID:
          type: integer
        vehicleType:
          type: string
          enum: [MotorcycleScooter, CarSUV, BusTruck]
        licensePlate:
          type: string
      required:
        - parkingLotID
        - vehicleType
        - licensePlate

    ParkingEntry:
      type: object
      properties:
        id:
          type: integer
        parkingLotID:
          type: integer
        vehicleType:
          type: string
          enum: [MotorcycleScooter, CarSUV, BusTruck]
        licensePlate:
          type: string
        entryTime:
          type: string
          format: date-time
        exitTime:
          type: string
          format: date-time
          nullable: true
      required:
        - id
        - parkingLotID
        - vehicleType
        - licensePlate
        - entryTime

    TariffInput:
      type: object
      properties:
        parkingLotID:
          type: integer
        vehicleType:
          type: string
          enum: [MotorcycleScooter, CarSUV, BusTruck]
        baseRate:
          type: number
        baseHours:
          type: integer
        hourlyRate:
          type: number
        dailyRate:
          type: number
        dailyRateHours:
          type: integer
      required:
        - parkingLotID
        - vehicleType
        - baseRate
        - baseHours
        - hourlyRate
        - dailyRate
        - dailyRateHours

    Tariff:
      type: object
      properties:
        id:
          type: integer
        parkingLotID:
          type: integer
        vehicleType:
          type: string
          enum: [MotorcycleScooter, CarSUV, BusTruck]
        baseRate:
          type: number
        baseHours:
          type: integer
        hourlyRate:
          type: number
        dailyRate:
          type: number
        dailyRateHours:
          type: integer
      required:
        - id
        - parkingLotID
        - vehicleType
        - baseRate
        - baseHours
        - hourlyRate
        - dailyRate
        - dailyRateHours

    Receipt:
      type: object
      properties:
        id:
          type: integer
        parkingEntryID:
          type: integer
        entryTime:
          type: string
          format: date-time
        exitTime:
          type: string
          format: date-time
        duration:
          type: string
        fee:
          type: number
      required:
        - id
        - parkingEntryID
        - entryTime
        - exitTime
        - duration
        - fee
